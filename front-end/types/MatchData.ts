enum EndgameParked { 'NONE', 'IN_WAREHOUSE', 'COMPLETELY_IN_WAREHOUSE' }
enum BarcodeElement { 'DUCK', 'TEAM_SHIPPING_ELEMENT' }
enum AutoNavigated { 'NONE', 'IN_STORAGE', 'COMPLETELY_IN_STORAGE', 'IN_WAREHOUSE', 'COMPLETELY_IN_WAREHOUSE' }

export interface MatchData {
    red: {
        driverControlledStoragePoints: number;
        allianceBalancedPoints: number;
        minorPenalties: number;
        capped: number;
        endgameParked2: EndgameParked;
        endgameParkingPoints: number;
        sharedFreight: number;
        carousel: boolean;
        endgameParked1: EndgameParked;
        driverControlledFreight1: number;
        driverControlledFreight2: number;
        driverControlledFreight3: number;
        autoFreightPoints: number;
        barcodeElement1: BarcodeElement;
        barcodeElement2: BarcodeElement;
        allianceBalanced: boolean;
        sharedUnbalanced: boolean;
        sharedUnbalancedPoints: number;
        autoBonus2: boolean;
        carouselPoints: number;
        autoNavigated2: AutoNavigated;
        autoNavigated1: AutoNavigated;
        autoBonus1: boolean;
        driverControlledAllianceHubPoints: number;
        autoFreight2: number;
        autoStorageFreight: number;
        autoFreight3: number;
        endgameDeliveryPoints: number;
        autoFreight1: number;
        endgameDelivered: number;
        driverControlledStorageFreight: number;
        autoBonusPoints: number;
        cappingPoints: number;
        totalPoints: number;
        driverControlledSharedHubPoints: number;
        majorPenalties: number;
        autoNavigationPoints: number;
        auto: number;
        teleop: number;
        end: number;
        penalty: number;
        dq1: boolean;
        dq2: boolean;
    }
    redScore: number;
    scheduledTime: number;
    blue: {
        driverControlledStoragePoints: number;
        allianceBalancedPoints: number;
        minorPenalties: number;
        capped: number;
        endgameParked2: EndgameParked;
        endgameParkingPoints: number;
        sharedFreight: number;
        carousel: boolean;
        endgameParked1: EndgameParked;
        driverControlledFreight1: number;
        driverControlledFreight2: number;
        driverControlledFreight3: number;
        autoFreightPoints: number;
        barcodeElement1: BarcodeElement;
        barcodeElement2: BarcodeElement;
        allianceBalanced: boolean;
        sharedUnbalanced: boolean;
        sharedUnbalancedPoints: number,
        autoBonus2: boolean;
        carouselPoints: number;
        autoNavigated2: AutoNavigated;
        autoNavigated1: AutoNavigated;
        autoBonus1: boolean;
        driverControlledAllianceHubPoints: number;
        autoFreight2: number;
        autoStorageFreight: number;
        autoFreight3: number;
        endgameDeliveryPoints: number;
        autoFreight1: number;
        endgameDelivered: number;
        driverControlledStorageFreight: number;
        autoBonusPoints: number;
        cappingPoints: number;
        totalPoints: number;
        driverControlledSharedHubPoints: number;
        majorPenalties: number;
        autoNavigationPoints: number;
        auto: number;
        teleop: number;
        end: number;
        penalty: number;
        dq1: boolean;
        dq2: boolean;
    }
    randomization: number;
    matchBrief: {
        red: {
            team1: number;
            team2: number;
            isTeam1Surrogate: boolean;
            isTeam2Surrogate: boolean;
        }
        field: number,
        blue: {
            team1: number;
            team2: number;
            isTeam1Surrogate: boolean;
            isTeam2Surrogate: boolean;
        }
        matchName: string;
        matchState: string;
        finished: boolean;
        time: number;
        matchNumber: number;
    }
    startTime: number;
    blueScore: number;
    resultPostedTime: number;
}
